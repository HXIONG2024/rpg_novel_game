write_theme:
  description: >
    Write a theme for the game based on the player's preferences:
    {player_preferences}
    Also include player character name:
    {player_character_name}
  expected_output: >
    Develop a unique and engaging theme that resonates with the player's preferences,
    taking into account their favorite genres, characters, and mood. 
    The theme should be creative, adaptable, and tailored to enhance their gaming or storytelling experience.
    Output should be in markdown format, but do not include any headers.
    You can bold, italicize, or underline text as needed for emphasis.
    **Note**: You only write the theme itself, no explanations or descriptions because 
    it will be the starting story of the novel game!
  agent: rpg_game_theme_writer

save_theme:
  description: >
    Use the 'save_theme' tool to save the theme that was generated by the rpg_game_theme_writer.
  expected_output: >
    The theme should be saved to the file "game_config/theme.md",
    Your job is to execute the tool, thats it, do not add any new information to the theme.
  agent: tool_executor

generate_initial_character_info:
  description: >
    write the configuration based on the theme that was generated by the rpg_game_theme_writer,
    and also include player character's name {player_character_name}. Your configuration should strictly 
    follow the pydantic schema, be well-structured, and tailored to enhance the overall gaming experience.
  expected_output: >
    think about what initial configuration should be given to the player character,
    then write the configuration. The initial configuration cannot be too OP,
    the player character config should be blanced in logic and follow the pydantic schema.
    your structure should be like this:
    {{
        "description": "player_character_description",
        "name": "player_character_name",
        "health_point": 5
    }}
    **Note**: you should only write the configuration, no explanations or descriptions.
    Do not add any new features to the config, we only have 3 features now(description, name, health_point).
  agent: rpg_initial_configuration_provider

modify_initial_character_info:
  description: >
    Modify the charater_info.json file based on the configuration that was provided by
    the rpg_initial_configuration_provider.
    you should use 'save_character_info' tool to save the modified configuration.
    Do not miss any information from the provided configuration.
  expected_output: >
    Your job is to modify and execute,
    do not add any information that is not provided 
    by the rpg_initial_configuration_provider.
  agent: rpg_initial_configuration_modifier

generate_initial_inventory_info:
  description: >
    write the configuration based on the theme that was generated by the rpg_game_theme_writer,
    Your configuration should strictly follow the pydantic schema, be well-structured, and tailored to 
    enhance the overall gaming experience.
  expected_output: >
    think about what initial item(the player should only have one item at the beginning)
    should be given to the player character,
    then write the configuration. The ability of the item should not include any damage,
    it is more like a function that can help the player character to do something,
    the player character config should be blanced in logic and follow the pydantic schema.
    your structure should be like this:
    {{
        "description": "current_inventory_description",
        "items": [
            {{
                "item_number": 1,
                "item_name": "item_name",
                "ability": "item_ability"
            }}
        ]
    }}
    **Note**: you should only write the configuration, no explanations or descriptions.
    Do not add any new features to the config, we only have 3 features now(description, item_name, ability).
  agent: rpg_initial_configuration_provider

modify_initial_inventory_info:
  description: >
    Modify the inventory_info.json file based on the configuration that was provided by
    the rpg_initial_configuration_provider.
    you should use 'save_inventory_info' tool to save the modified configuration.
    Do not miss any information from the provided configuration.
  expected_output: >
    Your job is to modify and execute,
    do not add any information that is not provided 
    by the rpg_initial_configuration_provider.
  agent: rpg_initial_configuration_modifier

